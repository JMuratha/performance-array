{"version":3,"file":"performance-array.spec.js","sourceRoot":"","sources":["../src/IPerformanceArrayOptions.ts","../src/KeyStorage.ts","../src/specImports.spec.ts","../src/KeyStorage.spec.ts","../src/PerformanceArray.ts","../src/PerformanceArray.spec.ts","../src/PerformanceArrayOptionsValidator.ts","../src/PerformanceArrayOptionsValidator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["namespace PerformanceArray {\n  export interface IPerformanceArrayIndexOptions {\n    propertyNames: Array<string>\n  }\n\n  export interface IPerformanceArrayOptions {\n    indices?: Array<IPerformanceArrayIndexOptions>;\n  }\n}","/// <reference path=\"./IPerformanceArrayOptions.ts\" />\n\n\nnamespace PerformanceArray {\n  type TIndexNameMap = { [s: string]: { [s: string]: Array<any> } };\n\n  export class KeyStorage {\n    private _options: IPerformanceArrayOptions;\n    private _indexNameMap: TIndexNameMap;\n\n    /**\n     * \n     * @param {PerformanceArray.IPerformanceArrayOptions} options - must be already validated\n     */\n    constructor(options: IPerformanceArrayOptions) {\n      this._options = options;\n      this._createIndexNameMap();\n    }\n\n    public addItem(item: any) {\n      for (const indexOpts of this._options.indices) {\n        this._addItemToIndexNameMap(item, indexOpts);\n      }\n    }\n\n    public removeItem(item: any) {\n      for (const indexOpts of this._options.indices) {\n        this._removeItemFromIndexNameMapByValue(item, indexOpts);\n      }\n    }\n\n    public updateItem(item: any) {\n      for (const indexOpts of this._options.indices) {\n        const items = this.queryItemsByIndexOpts(item, indexOpts);\n\n        if (items.indexOf(item) === -1) {\n          this._removeItemFromIndexNameMap(item, indexOpts);\n          this._addItemToIndexNameMap(item, indexOpts);\n        }\n      }\n    }\n\n    /**\n     * \n     * @param query - a map of property name to its queried value, also all propertyNames of the indexOpts have to be present in the query!\n     * @param indexOpts \n     */\n    public queryItemsByIndexOpts(query: { [s: string]: any }, indexOpts: IPerformanceArrayIndexOptions): Array<any> {\n      const indexMap = this._indexNameMap[this._generateIndexName(indexOpts)];\n      if (!indexMap) {\n        throw new Error(`[PerformanceArray] index for ${JSON.stringify(indexOpts)} doesn't exist`);\n      }\n\n      const items = indexMap[this._generateIndexValue(query, indexOpts)];\n      return items ? items : [];\n    }\n\n    private _createIndexNameMap() {\n      const map: TIndexNameMap = {};\n\n      for (const indexOpts of this._options.indices) {\n        const indexName: string = this._generateIndexName(indexOpts);\n        map[indexName] = {};\n      }\n\n      this._indexNameMap = map;\n    }\n\n    private _addItemToIndexNameMap(item: any, indexOpts: IPerformanceArrayIndexOptions) {\n      const indexMap = this._indexNameMap[this._generateIndexName(indexOpts)];\n      const indexValue = this._generateIndexValue(item, indexOpts)\n\n      let items = indexMap[indexValue]\n      if (!items) {\n        items = indexMap[indexValue] = [];\n      }\n\n      if (items.indexOf(item) === -1) {\n        items.push(item);\n      }\n    }\n\n    /**\n     * removes the item from its correct index, this is the more performant version of _removeItemFromIndexNameMap\n     * but it only works when the item is stored correctly!\n     * \n     * @param item \n     * @param indexOpts \n     */\n    private _removeItemFromIndexNameMapByValue(item: any, indexOpts: IPerformanceArrayIndexOptions) {\n      const indexMap = this._indexNameMap[this._generateIndexName(indexOpts)];\n      const indexValue = this._generateIndexValue(item, indexOpts)\n\n      let items = indexMap[indexValue];\n\n      if (items) {\n        const index = items.indexOf(item);\n        if (index >= 0) {\n          items.splice(index, 1);\n        }\n      }\n    }\n\n    /**\n     * removes the item from the whole index specified\n     * \n     * @param item \n     * @param indexOpts \n     */\n    private _removeItemFromIndexNameMap(item: any, indexOpts: IPerformanceArrayIndexOptions) {\n      const indexMap = this._indexNameMap[this._generateIndexName(indexOpts)];\n\n      for (const key in indexMap) {\n        if (!indexMap.hasOwnProperty(key)) {\n          continue;\n        }\n\n        const items = indexMap[key];\n        const index = items.indexOf(item);\n\n        if (index >= 0) {\n          items.splice(index, 1);\n        }\n      }\n    }\n\n    private _generateIndexValue(item: any, indexOpts: IPerformanceArrayIndexOptions): string {\n      const valueMap: { [s: string]: any } = {};\n\n      for (const name of indexOpts.propertyNames) {\n        const value = item[name] != null ? item[name] : null;\n        valueMap[name] = value;\n      }\n\n      let indexValue: string;\n\n      try {\n        indexValue = JSON.stringify(valueMap);\n      } catch (e) {\n        throw new Error('[PerformanceArray] Index couldn\\'t be serialized!')\n      }\n\n      return indexValue;\n    }\n\n    private _generateIndexName(indexOpts: IPerformanceArrayIndexOptions): string {\n      return JSON.stringify(indexOpts.propertyNames);\n    }\n  }\n}","const expect: Chai.ExpectStatic = require('chai').expect;","/// <reference path=\"./KeyStorage.ts\" />\n/// <reference path=\"./specImports.spec.ts\" />\n\ndescribe('KeyStorage', () => {\n\n  let keyStorage: PerformanceArray.KeyStorage;\n  const idIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\n    propertyNames: ['id']\n  };\n  const valueIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\n    propertyNames: ['value']\n  };\n  const nameValueIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\n    propertyNames: ['name', 'value']\n  };\n\n  let items: Array<{ id: number, name: string, value: number }>;\n\n  beforeEach(() => {\n    items = [\n      {\n        id: 10,\n        name: 'franz',\n        value: 10\n      },\n      {\n        id: 20,\n        name: 'franz',\n        value: 10\n      },\n      {\n        id: 30,\n        name: 'klaus',\n        value: 10\n      },\n      {\n        id: 40,\n        name: 'marta',\n        value: undefined\n      },\n      {\n        id: 50,\n        name: 'lisa',\n        value: null\n      }\n    ];\n\n    keyStorage = new PerformanceArray.KeyStorage({\n      indices: [idIndexOpts, nameValueIndexOpts, valueIndexOpts]\n    });\n\n    for (const item of items) {\n      keyStorage.addItem(item);\n    }\n  });\n\n  it('should find an item by the id', () => {\n    expect(keyStorage.queryItemsByIndexOpts({ id: 10 }, idIndexOpts)[0]).to.be.equal(items[0]);\n  });\n\n  it('should handle null and undefined in the same way', () => {\n    const result = keyStorage.queryItemsByIndexOpts({ value: null }, valueIndexOpts);\n    expect(result, 'to find marta and lisa').to.deep.equal([items[3], items[4]]);\n  });\n\n  it('should find items with an combined index', () => {\n    const result = keyStorage.queryItemsByIndexOpts({ name: 'franz', value: 10 }, nameValueIndexOpts);\n    expect(result, 'to find franz (id 10) and franz (id 20)').to.deep.equal([items[0], items[1]]);\n  });\n\n  it('should be able to remove items', () => {\n    keyStorage.removeItem(items[0]);\n    expect(keyStorage.queryItemsByIndexOpts({ id: 10 }, idIndexOpts)).to.be.empty;\n    expect(keyStorage.queryItemsByIndexOpts({ name: 'franz', value: 10 }, nameValueIndexOpts)).to.have.lengthOf(1);\n    expect(keyStorage.queryItemsByIndexOpts({ value: 10 }, valueIndexOpts)).to.have.lengthOf(2);\n  });\n\n  it('should move updated item to the correct index', () => {\n    items[0].id = 11;\n    expect(keyStorage.queryItemsByIndexOpts({ id: 10 }, idIndexOpts)[0], 'to find item in old index before updating').to.be.equal(items[0]);\n    keyStorage.updateItem(items[0]);\n    expect(keyStorage.queryItemsByIndexOpts({ id: 10 }, idIndexOpts)[0], 'to not find item in old index after updating').to.be.undefined;\n    expect(keyStorage.queryItemsByIndexOpts({ id: 11 }, idIndexOpts)[0], 'to find item in new index after updating').to.be.equal(items[0]);\n  });\n});","/// <reference path=\"./IPerformanceArrayOptions.ts\" />\n\n\nnamespace PerformanceArray {\n  export class PerformanceArray<T> {\n\n    private _arrayData: Array<T>;\n\n    constructor(arrayData: Array<T>) {\n      this._arrayData = arrayData;\n    }\n\n    item(i: number): T {\n      return this._arrayData[i];\n    }\n\n    remove(item: T) {\n      const index = this._arrayData.indexOf(item);\n      if (index >= 0) {\n        this._arrayData.splice(index, 1);\n      }\n    }\n\n    push(item: T) {\n      this._arrayData.push(item);\n    }\n\n    pop(): T | undefined {\n      return this._arrayData.pop();\n    }\n\n    unshift(item: T) {\n      this._arrayData.unshift(item);\n    }\n\n    shift(): T | undefined {\n      return this._arrayData.shift();\n    }\n\n    /**\n     * returns the removed items\n     * \n     * @param index \n     * @param deleteCount \n     * @param insertItems \n     */\n    splice(index: number, deleteCount: number, ...insertItems: Array<T>): Array<T> {\n      return this._arrayData.splice.apply(this._arrayData, [index, deleteCount, ...insertItems]);\n    }\n\n    toArray(): Array<T> {\n      return this._arrayData.slice();\n    }\n\n    get length(): number {\n      return this._arrayData.length;\n    }\n  }\n}","/// <reference path=\"./PerformanceArray.ts\" />\n/// <reference path=\"./specImports.spec.ts\" />\n\ndescribe('PerformanceArray', () => {\n  let testData: Array<{ id: number, value: number }>;\n  let performanceArray: PerformanceArray.PerformanceArray<{ id: number, value: number }>;\n\n  beforeEach(() => {\n    testData = [\n      {\n        id: 1,\n        value: 10,\n      },\n      {\n        id: 2,\n        value: 11,\n      }, {\n        id: 3,\n        value: 12,\n      }, {\n        id: 4,\n        value: 13,\n      }, {\n        id: 5,\n        value: 14,\n      }\n    ];\n\n    performanceArray = new PerformanceArray.PerformanceArray(testData);\n  });\n  it('should be convertible to an array', () => {\n    const resultData = performanceArray.toArray();\n\n    testData.forEach((item, index) => {\n      expect(item).to.be.equal(resultData[index], `data at index ${index} is equal`);\n    });\n\n    expect(testData).to.not.be.equal(resultData, 'result array should not be equal to input array');\n  });\n\n  it('can access items at a certain index', () => {\n    expect(testData[0]).to.be.equal(performanceArray.item(0), 'item at index 2 is the same');\n    expect(testData[2]).to.be.equal(performanceArray.item(2), 'item at index 2 is the same');\n    expect(performanceArray.item(5000), 'item at out of bounds index is undefined').to.be.undefined;\n  });\n\n  it('can push a new item', () => {\n    const item = { id: 100, value: 5482 };\n    performanceArray.push(item);\n    expect(performanceArray.item(performanceArray.length - 1)).to.be.equal(item);\n  });\n\n  it('can pop an item', () => {\n    const item = performanceArray.item(performanceArray.length - 1);\n    const oldLength = performanceArray.length;\n\n    const poppedItem = performanceArray.pop();\n    expect(poppedItem).to.be.equal(item);\n    expect(performanceArray.length).to.be.equal(oldLength - 1);\n  });\n\n  it('can shift an item', () => {\n    const item = performanceArray.item(0);\n    const oldLength = performanceArray.length;\n\n    const shiftedItem = performanceArray.shift();\n    expect(shiftedItem).to.be.equal(item);\n    expect(performanceArray.length).to.be.equal(oldLength - 1);\n  });\n\n  it('can unshift a new item', () => {\n    const item = { id: 100, value: 5482 };\n    const oldLength = performanceArray.length;\n    performanceArray.unshift(item);\n    expect(performanceArray.item(0)).to.be.equal(item);\n    expect(performanceArray.length).to.be.equal(oldLength + 1);\n  });\n\n  it('can splice items', () => {\n    const newItem = { id: 100, value: 5482 };\n    const oldLength = performanceArray.length;\n    const itemThatShouldBeRemoved = performanceArray.item(2);\n    const removedItems = performanceArray.splice(2, 1, newItem);\n\n    expect(removedItems[0], 'removed the correct item').to.be.equal(itemThatShouldBeRemoved);\n    expect(performanceArray.length).to.be.equal(oldLength);\n    expect(performanceArray.item(2), 'added the new item at the correct index').to.be.equal(newItem);\n  })\n});","/// <reference path=\"./IPerformanceArrayOptions.ts\" />\n\n\nnamespace PerformanceArray {\n  interface IAvailableKeyInfo {\n    name: string,\n    type: any,\n    subType?: any, //for arrays which don't need further validation than the type\n    subKeyInfos?: Array<IAvailableKeyInfo> //only works on objects/array of objects\n  }\n\n  export class PerformanceArrayOptionsValidator {\n\n    private _options: IPerformanceArrayOptions;\n\n    private static _availableKeyInfos: Array<IAvailableKeyInfo> = [\n      {\n        name: 'indices',\n        type: Array,\n        subKeyInfos: [\n          {\n            name: 'propertyNames',\n            type: Array,\n            subType: String\n          }\n        ]\n      }\n    ];\n\n    constructor(options: IPerformanceArrayOptions) {\n      this._options = options;\n    }\n\n    /**\n     * return true if the options object is valid, else it will throw an exception with a description\n     */\n    public validate(): boolean {\n      this._validateObject(this._options, PerformanceArrayOptionsValidator._availableKeyInfos);\n      return true;\n    }\n\n    private _validateObject(obj: Object, availableKeyInfos: Array<IAvailableKeyInfo>, optionPath: string = '') {\n      for (let key in obj) {\n        const value = (<any>obj)[key];\n        if (!obj.hasOwnProperty(key)) {\n          continue;\n        }\n\n        this._validateKeyValue(key, value, availableKeyInfos, optionPath + '.' + key);\n      }\n    }\n\n    private _validateKeyValue(key: string, value: any, availableKeyInfos: Array<IAvailableKeyInfo>, optionPath: string) {\n      const info = this._getAvailableKeyInfoByName(key, availableKeyInfos);\n      if (!info) {\n        throw new Error(`[PerformanceArray] invalid option ${key}`);\n      }\n\n      if (value.constructor !== info.type) {\n        throw new Error(\n          `[PerformanceArray] expected type ${this._getNameOfClass(info.type)} but got type ${this._getNameOfClass(value.constructor)} instead for ${key}`\n        );\n      }\n\n      if (value.constructor === Array && info.subType) {\n        this._validateArraySubType(value, info.subType, optionPath);\n      }\n\n      if (info.subKeyInfos) {\n        if (value.constructor === Array) {\n          value.forEach((item: any, index: number) => this._validateObject(item, info.subKeyInfos, optionPath + '.' + index));\n        } else {\n          this._validateObject(value, info.subKeyInfos, optionPath);\n        }\n      }\n    }\n\n    private _validateArraySubType(array: Array<any>, itemType: any, optionsPath: string) {\n      array.forEach((item, index) => {\n        if (item.constructor !== itemType) {\n          throw new Error(\n            `[PerformanceArray] expected type ${this._getNameOfClass(item.constructor)} but got type ${this._getNameOfClass(item.constructor)} instead for `\n            + optionsPath + '.' + index\n          )\n        }\n      })\n    }\n\n    private _getNameOfClass(cl: any): string | null {\n      const result = /function ([^)]*)\\(/.exec(String(cl));\n      return result ? result[1] : null;\n    }\n\n    private _getAvailableKeyInfoByName(name: string, availableKeyInfos: Array<IAvailableKeyInfo>): IAvailableKeyInfo {\n      return availableKeyInfos.find((info) => info.name === name)\n    }\n  }\n}","/// <reference path=\"./PerformanceArrayOptionsValidator.ts\" />\n/// <reference path=\"./specImports.spec.ts\" />\n\ndescribe('PerformanceArrayOptionsValidator', () => {\n\n  it('should allow and empty object', () => {\n    const validator = new PerformanceArray.PerformanceArrayOptionsValidator({});\n    validator.validate();\n  });\n\n  it('should throw an error on an unknown key', () => {\n    let error: Error = null;\n\n    try {\n      const validator = new PerformanceArray.PerformanceArrayOptionsValidator((<any>{ powderThatMakesYouSayYes: 'yes' }));\n      validator.validate();\n    } catch (e) {\n      error = e;\n    }\n\n    expect(error).to.not.be.null;\n  });\n\n  it('should throw an error on an invalid index option key', () => {\n    let error: Error = null;\n\n    try {\n      const validator = new PerformanceArray.PerformanceArrayOptionsValidator((<any>{\n        indices: [{ powderThatMakesYouSayYes: 'yes' }]\n      }));\n      validator.validate();\n    } catch (e) {\n      error = e;\n    }\n\n    expect(error).to.not.be.null;\n  });\n\n  it('should throw an error on an invalid index property name', () => {\n    let error: Error = null;\n\n    try {\n      const validator = new PerformanceArray.PerformanceArrayOptionsValidator((<any>{\n        indices: [{\n          propertyNames: [{}]\n        }]\n      }));\n      validator.validate();\n    } catch (e) {\n      error = e;\n    }\n\n    expect(error).to.not.be.null;\n  });\n\n  it('should validate a fully configured options object', () => {\n    const validator = new PerformanceArray.PerformanceArrayOptionsValidator({\n      indices: [\n        {\n          propertyNames: ['id']\n        }\n      ]\n    });\n    validator.validate();\n  });\n});"]}