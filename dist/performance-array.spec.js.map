{"version":3,"file":"performance-array.spec.js","sourceRoot":"","sources":["../src/TQuery.ts","../src/IPerformanceArrayOptions.ts","../src/IndexFinder.ts","../src/specImports.spec.ts","../src/Utils.ts","../src/KeyStorage.ts","../src/SpecTestData.spec.ts","../src/IndexFinder.spec.ts","../src/KeyStorage.spec.ts","../src/PerformanceArray.ts","../src/PerformanceArray.spec.ts","../src/PerformanceArrayOptionsValidator.ts","../src/PerformanceArrayOptionsValidator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["namespace PerformanceArray {\n  export type TQuery = { [s: string]: any } ; //a map of property names to their queried value\n}\n","namespace PerformanceArray {\n  export interface IPerformanceArrayIndexOptions {\n    propertyNames: Array<string>;\n  }\n\n  export interface IPerformanceArrayOptions {\n    indices?: Array<IPerformanceArrayIndexOptions>;\n  }\n}","/// <reference path=\"./TQuery.ts\" />\n/// <reference path=\"./IPerformanceArrayOptions.ts\" />\n\nnamespace PerformanceArray {\n  export class IndexFinder {\n\n    private _options: IPerformanceArrayOptions;\n\n    /**\n     * \n     * @param options - have to be already validated\n     */\n    constructor(options: IPerformanceArrayOptions) {\n      this._options = options;\n    }\n\n    public findIndexOptionsForQuery(query: TQuery): IPerformanceArrayIndexOptions | null {\n      const propertyNames: Array<string> = Object.keys(query);\n\n      let currentMatchCount: number = 0;\n      let options: IPerformanceArrayIndexOptions = null;\n\n      for (const indexOpts of this._options.indices) {\n        const matchCount = this._findMatchCount(propertyNames, indexOpts.propertyNames);\n        if (matchCount > currentMatchCount) {\n          currentMatchCount = matchCount;\n          options = indexOpts;\n        }\n      }\n\n      return options;\n    }\n\n    private _findMatchCount(queryPropertyNames: Array<string>, indexPropertyNames: Array<string>): number {\n      //query can only be more inclusive than the index, but not less\n      if (queryPropertyNames.length < indexPropertyNames.length) {\n        return 0;\n      }\n\n      for (const indexPropertyName of indexPropertyNames) {\n        if (queryPropertyNames.indexOf(indexPropertyName) === -1) {\n          //query doesn't contain the whole index, we can't match that\n          return 0;\n        }\n      }\n\n      return indexPropertyNames.length;\n    }\n  }\n}","const expect: Chai.ExpectStatic = require('chai').expect;","namespace PerformanceArray {\r\n  export class Utils {\r\n    /**\r\n     * if the value is null or undefined, null is returned, else the value is returned\r\n     */\r\n    static normalizeUndefined(value: any): any {\r\n      return value != null ? value : null;\r\n    }\r\n  }\r\n}","/// <reference path=\"./TQuery.ts\" />\r\n/// <reference path=\"./IPerformanceArrayOptions.ts\" />\r\n/// <reference path=\"./Utils.ts\" />\r\n\r\n\r\nnamespace PerformanceArray {\r\n  type TIndexNameMap = { [s: string]: { [s: string]: Array<any> } };\r\n\r\n  export class KeyStorage {\r\n    private _options: IPerformanceArrayOptions;\r\n    private _indexNameMap: TIndexNameMap;\r\n\r\n    /**\r\n     * \r\n     * @param {PerformanceArray.IPerformanceArrayOptions} options - must be already validated\r\n     */\r\n    constructor(options: IPerformanceArrayOptions) {\r\n      this._options = options;\r\n      this._createIndexNameMap();\r\n    }\r\n\r\n    public addItem(item: any) {\r\n      for (const indexOpts of this._options.indices) {\r\n        this._addItemToIndexNameMap(item, indexOpts);\r\n      }\r\n    }\r\n\r\n    public removeItem(item: any) {\r\n      for (const indexOpts of this._options.indices) {\r\n        this._removeItemFromIndexNameMapByValue(item, indexOpts);\r\n      }\r\n    }\r\n\r\n    public updateItem(item: any) {\r\n      for (const indexOpts of this._options.indices) {\r\n        const items = this.queryItemsByIndexOpts(item, indexOpts);\r\n\r\n        if (items.indexOf(item) === -1) {\r\n          this._removeItemFromIndexNameMap(item, indexOpts);\r\n          this._addItemToIndexNameMap(item, indexOpts);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param query - all propertyNames of the indexOpts have to be present in the query!\r\n     * @param indexOpts \r\n     */\r\n    public queryItemsByIndexOpts(query: TQuery, indexOpts: IPerformanceArrayIndexOptions): Array<any> {\r\n      const indexMap = this._indexNameMap[this._generateIndexName(indexOpts)];\r\n      if (!indexMap) {\r\n        throw new Error(`[PerformanceArray] index for ${JSON.stringify(indexOpts)} doesn't exist`);\r\n      }\r\n\r\n      const items = indexMap[this._generateIndexValue(query, indexOpts)];\r\n      return items ? items : [];\r\n    }\r\n\r\n    private _createIndexNameMap() {\r\n      const map: TIndexNameMap = {};\r\n\r\n      for (const indexOpts of this._options.indices) {\r\n        const indexName: string = this._generateIndexName(indexOpts);\r\n        map[indexName] = {};\r\n      }\r\n\r\n      this._indexNameMap = map;\r\n    }\r\n\r\n    private _addItemToIndexNameMap(item: any, indexOpts: IPerformanceArrayIndexOptions) {\r\n      const indexMap = this._indexNameMap[this._generateIndexName(indexOpts)];\r\n      const indexValue = this._generateIndexValue(item, indexOpts);\r\n\r\n      let items = indexMap[indexValue];\r\n      if (!items) {\r\n        items = indexMap[indexValue] = [];\r\n      }\r\n\r\n      if (items.indexOf(item) === -1) {\r\n        items.push(item);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes the item from its correct index, this is the more performant version of _removeItemFromIndexNameMap\r\n     * but it only works when the item is stored correctly!\r\n     * \r\n     * @param item \r\n     * @param indexOpts \r\n     */\r\n    private _removeItemFromIndexNameMapByValue(item: any, indexOpts: IPerformanceArrayIndexOptions) {\r\n      const indexMap = this._indexNameMap[this._generateIndexName(indexOpts)];\r\n      const indexValue = this._generateIndexValue(item, indexOpts);\r\n\r\n      let items = indexMap[indexValue];\r\n\r\n      if (items) {\r\n        const index = items.indexOf(item);\r\n        if (index >= 0) {\r\n          items.splice(index, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes the item from the whole index specified\r\n     * \r\n     * @param item \r\n     * @param indexOpts \r\n     */\r\n    private _removeItemFromIndexNameMap(item: any, indexOpts: IPerformanceArrayIndexOptions) {\r\n      const indexMap = this._indexNameMap[this._generateIndexName(indexOpts)];\r\n\r\n      for (const key in indexMap) {\r\n        if (!indexMap.hasOwnProperty(key)) {\r\n          continue;\r\n        }\r\n\r\n        const items = indexMap[key];\r\n        const index = items.indexOf(item);\r\n\r\n        if (index >= 0) {\r\n          items.splice(index, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    private _generateIndexValue(item: any, indexOpts: IPerformanceArrayIndexOptions): string {\r\n      const valueMap: { [s: string]: any } = {};\r\n\r\n      for (const name of indexOpts.propertyNames) {\r\n        valueMap[name] = Utils.normalizeUndefined(item[name]);\r\n      }\r\n\r\n      let indexValue: string;\r\n\r\n      try {\r\n        indexValue = JSON.stringify(valueMap);\r\n      } catch (e) {\r\n        throw new Error('[PerformanceArray] Index couldn\\'t be serialized!');\r\n      }\r\n\r\n      return indexValue;\r\n    }\r\n\r\n    private _generateIndexName(indexOpts: IPerformanceArrayIndexOptions): string {\r\n      return JSON.stringify(indexOpts.propertyNames);\r\n    }\r\n  }\r\n}","/// <reference path=\"./KeyStorage.ts\" />\r\n/// <reference path=\"./IPerformanceArrayOptions.ts\" />\r\n\r\ntype TSpecTestDataUser = { id: number, name: string, value: number|null, unindexedProperty: string};\r\n\r\nclass SpecTestData {\r\n  public static frank: TSpecTestDataUser = {\r\n    id: 10,\r\n    name: 'frank',\r\n    value: 5,\r\n    unindexedProperty: 'frank is cool'\r\n  };\r\n\r\n  public static clara: TSpecTestDataUser = {\r\n    id: 20,\r\n    name: 'clara',\r\n    value: 50,\r\n    unindexedProperty: 'a cool text'\r\n  };\r\n\r\n  public static martin: TSpecTestDataUser = {\r\n    id: 30,\r\n    name: 'martin',\r\n    value: 15,\r\n    unindexedProperty: 'likes cars'\r\n  };\r\n\r\n  public static max: TSpecTestDataUser = {\r\n    id: 40,\r\n    name: 'max',\r\n    value: 150,\r\n    unindexedProperty: 'likes houses'\r\n  };\r\n\r\n  public static dara: TSpecTestDataUser = {\r\n    id: 50,\r\n    name: 'dara',\r\n    value: 50,\r\n    unindexedProperty: 'is a pilot'\r\n  };\r\n\r\n  public static karl: TSpecTestDataUser = {\r\n    id: 60,\r\n    name: 'karl',\r\n    value: null,\r\n    unindexedProperty: 'likes null'\r\n  };\r\n\r\n  public static stranger: TSpecTestDataUser = {\r\n    id: 70,\r\n    name: 'stranger',\r\n    value: undefined,\r\n    unindexedProperty: 'likes undefined'\r\n  };\r\n\r\n  public static idIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\r\n    propertyNames: ['id']\r\n  };\r\n\r\n  public static valueIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\r\n    propertyNames: ['value']\r\n  };\r\n\r\n  public static nameValueIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\r\n    propertyNames: ['name', 'value']\r\n  };\r\n\r\n  public static fillKeyStorageWithUsers(keyStorage: PerformanceArray.KeyStorage) {\r\n    this.generateUserList().forEach(u => keyStorage.addItem(u));\r\n  }\r\n\r\n  public static generateUserList(): Array<TSpecTestDataUser> {\r\n    return [\r\n      this.frank,\r\n      this.clara,\r\n      this.martin,\r\n      this.max,\r\n      this.dara,\r\n      this.stranger,\r\n      this.karl\r\n    ];\r\n  }\r\n\r\n  public static generatePerformanceArrayOptions(): PerformanceArray.IPerformanceArrayOptions {\r\n    return {\r\n      indices: [\r\n        this.idIndexOpts,\r\n        this.valueIndexOpts,\r\n        this.nameValueIndexOpts\r\n      ]\r\n    };\r\n  }\r\n}","/// <reference path=\"./IndexFinder.ts\" />\n/// <reference path=\"./specImports.spec.ts\" />\n/// <reference path=\"./SpecTestData.spec.ts\" />\n\ndescribe('IndexFinder', () => {\n\n  let indexFinder: PerformanceArray.IndexFinder;\n  /*\n  const idIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\n    propertyNames: ['id']\n  };\n  const valueIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\n    propertyNames: ['value']\n  };\n  const nameValueIndexOpts: PerformanceArray.IPerformanceArrayIndexOptions = {\n    propertyNames: ['name', 'value']\n  };*/\n\n  beforeEach(() => {\n    indexFinder = new PerformanceArray.IndexFinder(SpecTestData.generatePerformanceArrayOptions());\n  });\n\n  it('should find the id index', () => {\n    const indexOptions = indexFinder.findIndexOptionsForQuery({ id: 10 });\n    expect(indexOptions).to.be.equal(SpecTestData.idIndexOpts);\n  });\n\n  it('should find the nameValue index', () => {\n    const indexOptions = indexFinder.findIndexOptionsForQuery({ name: 'franz', value: null });\n    expect(indexOptions).to.be.equal(SpecTestData.nameValueIndexOpts);\n  });\n\n  it('should find the value index', () => {\n    const indexOptions = indexFinder.findIndexOptionsForQuery({ value: null, someProperty: '20' });\n    expect(indexOptions).to.be.equal(SpecTestData.valueIndexOpts);\n  });\n\n  it('should find no index', () => {\n    const indexOptions = indexFinder.findIndexOptionsForQuery({ someProperty: '20' });\n    expect(indexOptions).to.be.null;\n  });\n});","/// <reference path=\"./KeyStorage.ts\" />\n/// <reference path=\"./specImports.spec.ts\" />\n/// <reference path=\"./SpecTestData.spec.ts\" />\n\ndescribe('KeyStorage', () => {\n\n  let keyStorage: PerformanceArray.KeyStorage;\n\n  beforeEach(() => {\n    keyStorage = new PerformanceArray.KeyStorage(SpecTestData.generatePerformanceArrayOptions());\n    SpecTestData.fillKeyStorageWithUsers(keyStorage);\n  });\n\n  it('should find an item by the id', () => {\n    const result = keyStorage.queryItemsByIndexOpts({ id: SpecTestData.frank.id }, SpecTestData.idIndexOpts);\n    expect(result[0]).to.be.equal(SpecTestData.frank);\n  });\n\n  it('should handle null and undefined in the same way', () => {\n    const result = keyStorage.queryItemsByIndexOpts({ value: null }, SpecTestData.valueIndexOpts);\n    expect(result).to.have.length(2, 'to find 2 items');\n    expect(result).to.contain(SpecTestData.stranger, 'to find stranger');\n    expect(result).to.contain(SpecTestData.karl, 'to find karl');\n  });\n\n  it('should find items with an combined index', () => {\n    const query: PerformanceArray.TQuery = { name: SpecTestData.max.name, value: SpecTestData.max.value };\n    const result = keyStorage.queryItemsByIndexOpts(query, SpecTestData.nameValueIndexOpts);\n    expect(result, 'to find max').to.deep.equal([SpecTestData.max]);\n  });\n\n  it('should be able to remove items', () => {\n    keyStorage.removeItem(SpecTestData.clara);\n    expect(keyStorage.queryItemsByIndexOpts({ id: SpecTestData.clara.id }, SpecTestData.idIndexOpts)).to.be.empty;\n  });\n\n  it('should move updated item to the correct index', () => {\n    const oldId: number = SpecTestData.dara.id;\n    const newId: number = ++SpecTestData.dara.id;\n\n    const oldIndexItem = keyStorage.queryItemsByIndexOpts({ id: oldId }, SpecTestData.idIndexOpts)[0];\n    expect(oldIndexItem, 'to find item in old index before updating').to.be.equal(SpecTestData.dara);\n    keyStorage.updateItem(SpecTestData.dara);\n\n    const oldIndexNewItem = keyStorage.queryItemsByIndexOpts({ id: oldId }, SpecTestData.idIndexOpts)[0];\n    expect(oldIndexNewItem, 'to not find item in old index after updating').to.be.undefined;\n    const newIndexItem = keyStorage.queryItemsByIndexOpts({ id: newId }, SpecTestData.idIndexOpts)[0];\n    expect(newIndexItem, 'to find item in new index after updating').to.be.equal(SpecTestData.dara);\n  });\n});","/// <reference path=\"./IPerformanceArrayOptions.ts\" />\n\n\nnamespace PerformanceArray {\n  export class PerformanceArray<T> {\n\n    private _arrayData: Array<T>;\n\n    constructor(arrayData: Array<T>) {\n      this._arrayData = arrayData;\n    }\n\n    item(i: number): T {\n      return this._arrayData[i];\n    }\n\n    remove(item: T) {\n      const index = this._arrayData.indexOf(item);\n      if (index >= 0) {\n        this._arrayData.splice(index, 1);\n      }\n    }\n\n    push(item: T) {\n      this._arrayData.push(item);\n    }\n\n    pop(): T | undefined {\n      return this._arrayData.pop();\n    }\n\n    unshift(item: T) {\n      this._arrayData.unshift(item);\n    }\n\n    shift(): T | undefined {\n      return this._arrayData.shift();\n    }\n\n    /**\n     * returns the removed items\n     * \n     * @param index \n     * @param deleteCount \n     * @param insertItems \n     */\n    splice(index: number, deleteCount: number, ...insertItems: Array<T>): Array<T> {\n      return this._arrayData.splice.apply(this._arrayData, [index, deleteCount, ...insertItems]);\n    }\n\n    toArray(): Array<T> {\n      return this._arrayData.slice();\n    }\n\n    get length(): number {\n      return this._arrayData.length;\n    }\n  }\n}","/// <reference path=\"./PerformanceArray.ts\" />\n/// <reference path=\"./specImports.spec.ts\" />\n\ndescribe('PerformanceArray', () => {\n  let testData: Array<{ id: number, value: number }>;\n  let performanceArray: PerformanceArray.PerformanceArray<{ id: number, value: number }>;\n\n  beforeEach(() => {\n    testData = [\n      {\n        id: 1,\n        value: 10,\n      },\n      {\n        id: 2,\n        value: 11,\n      }, {\n        id: 3,\n        value: 12,\n      }, {\n        id: 4,\n        value: 13,\n      }, {\n        id: 5,\n        value: 14,\n      }\n    ];\n\n    performanceArray = new PerformanceArray.PerformanceArray(testData);\n  });\n  it('should be convertible to an array', () => {\n    const resultData = performanceArray.toArray();\n\n    testData.forEach((item, index) => {\n      expect(item).to.be.equal(resultData[index], `data at index ${index} is equal`);\n    });\n\n    expect(testData).to.not.be.equal(resultData, 'result array should not be equal to input array');\n  });\n\n  it('can access items at a certain index', () => {\n    expect(testData[0]).to.be.equal(performanceArray.item(0), 'item at index 2 is the same');\n    expect(testData[2]).to.be.equal(performanceArray.item(2), 'item at index 2 is the same');\n    expect(performanceArray.item(5000), 'item at out of bounds index is undefined').to.be.undefined;\n  });\n\n  it('can push a new item', () => {\n    const item = { id: 100, value: 5482 };\n    performanceArray.push(item);\n    expect(performanceArray.item(performanceArray.length - 1)).to.be.equal(item);\n  });\n\n  it('can pop an item', () => {\n    const item = performanceArray.item(performanceArray.length - 1);\n    const oldLength = performanceArray.length;\n\n    const poppedItem = performanceArray.pop();\n    expect(poppedItem).to.be.equal(item);\n    expect(performanceArray.length).to.be.equal(oldLength - 1);\n  });\n\n  it('can shift an item', () => {\n    const item = performanceArray.item(0);\n    const oldLength = performanceArray.length;\n\n    const shiftedItem = performanceArray.shift();\n    expect(shiftedItem).to.be.equal(item);\n    expect(performanceArray.length).to.be.equal(oldLength - 1);\n  });\n\n  it('can unshift a new item', () => {\n    const item = { id: 100, value: 5482 };\n    const oldLength = performanceArray.length;\n    performanceArray.unshift(item);\n    expect(performanceArray.item(0)).to.be.equal(item);\n    expect(performanceArray.length).to.be.equal(oldLength + 1);\n  });\n\n  it('can splice items', () => {\n    const newItem = { id: 100, value: 5482 };\n    const oldLength = performanceArray.length;\n    const itemThatShouldBeRemoved = performanceArray.item(2);\n    const removedItems = performanceArray.splice(2, 1, newItem);\n\n    expect(removedItems[0], 'removed the correct item').to.be.equal(itemThatShouldBeRemoved);\n    expect(performanceArray.length).to.be.equal(oldLength);\n    expect(performanceArray.item(2), 'added the new item at the correct index').to.be.equal(newItem);\n  });\n});","/// <reference path=\"./IPerformanceArrayOptions.ts\" />\n\n\nnamespace PerformanceArray {\n  interface IAvailableKeyInfo {\n    name: string;\n    type: any;\n    subType?: any; //for arrays which don't need further validation than the type\n    subKeyInfos?: Array<IAvailableKeyInfo>; //only works on objects/array of objects\n  }\n\n  export class PerformanceArrayOptionsValidator {\n\n    private _options: IPerformanceArrayOptions;\n\n    private static _availableKeyInfos: Array<IAvailableKeyInfo> = [\n      {\n        name: 'indices',\n        type: Array,\n        subKeyInfos: [\n          {\n            name: 'propertyNames',\n            type: Array,\n            subType: String\n          }\n        ]\n      }\n    ];\n\n    constructor(options: IPerformanceArrayOptions) {\n      this._options = options;\n    }\n\n    /**\n     * return true if the options object is valid, else it will throw an exception with a description\n     */\n    public validate(): boolean {\n      this._validateObject(this._options, PerformanceArrayOptionsValidator._availableKeyInfos);\n      return true;\n    }\n\n    private _validateObject(obj: Object, availableKeyInfos: Array<IAvailableKeyInfo>, optionPath: string = '') {\n      for (let key in obj) {\n        const value = (<any>obj)[key];\n        if (!obj.hasOwnProperty(key)) {\n          continue;\n        }\n\n        this._validateKeyValue(key, value, availableKeyInfos, optionPath + '.' + key);\n      }\n    }\n\n    // tslint:disable-next-line:max-line-length\n    private _validateKeyValue(key: string, value: any, availableKeyInfos: Array<IAvailableKeyInfo>, optionPath: string) {\n      const info = this._getAvailableKeyInfoByName(key, availableKeyInfos);\n      if (!info) {\n        throw new Error(`[PerformanceArray] invalid option ${key}`);\n      }\n\n      if (value.constructor !== info.type) {\n        throw new Error(\n          `[PerformanceArray] expected type ${this._getNameOfClass(info.type)}`\n          + ` but got type ${this._getNameOfClass(value.constructor)} instead for ${key}`\n        );\n      }\n\n      if (value.constructor === Array && info.subType) {\n        this._validateArraySubType(value, info.subType, optionPath);\n      }\n\n      if (info.subKeyInfos) {\n        if (value.constructor === Array) {\n          value.forEach((item: any, index: number) => {\n            return this._validateObject(item, info.subKeyInfos, optionPath + '.' + index);\n          });\n        } else {\n          this._validateObject(value, info.subKeyInfos, optionPath);\n        }\n      }\n    }\n\n    private _validateArraySubType(array: Array<any>, itemType: any, optionsPath: string) {\n      array.forEach((item, index) => {\n        if (item.constructor !== itemType) {\n          throw new Error(\n            `[PerformanceArray] expected type ${this._getNameOfClass(item.constructor)}`\n            + ` but got type ${this._getNameOfClass(item.constructor)} instead for `\n            + optionsPath + '.' + index\n          );\n        }\n      });\n    }\n\n    private _getNameOfClass(cl: any): string | null {\n      const result = /function ([^)]*)\\(/.exec(String(cl));\n      return result ? result[1] : null;\n    }\n\n    private _getAvailableKeyInfoByName(name: string, availableKeyInfos: Array<IAvailableKeyInfo>): IAvailableKeyInfo {\n      return availableKeyInfos.find((info) => info.name === name);\n    }\n  }\n}","/// <reference path=\"./PerformanceArrayOptionsValidator.ts\" />\n/// <reference path=\"./specImports.spec.ts\" />\n\ndescribe('PerformanceArrayOptionsValidator', () => {\n\n  it('should allow and empty object', () => {\n    const validator = new PerformanceArray.PerformanceArrayOptionsValidator({});\n    validator.validate();\n  });\n\n  it('should throw an error on an unknown key', () => {\n    let error: Error = null;\n\n    try {\n      const validator = new PerformanceArray.PerformanceArrayOptionsValidator(\n        (<any>{ powderThatMakesYouSayYes: 'yes' })\n      );\n      validator.validate();\n    } catch (e) {\n      error = e;\n    }\n\n    expect(error).to.not.be.null;\n  });\n\n  it('should throw an error on an invalid index option key', () => {\n    let error: Error = null;\n\n    try {\n      const validator = new PerformanceArray.PerformanceArrayOptionsValidator((<any>{\n        indices: [{ powderThatMakesYouSayYes: 'yes' }]\n      }));\n      validator.validate();\n    } catch (e) {\n      error = e;\n    }\n\n    expect(error).to.not.be.null;\n  });\n\n  it('should throw an error on an invalid index property name', () => {\n    let error: Error = null;\n\n    try {\n      const validator = new PerformanceArray.PerformanceArrayOptionsValidator((<any>{\n        indices: [{\n          propertyNames: [{}]\n        }]\n      }));\n      validator.validate();\n    } catch (e) {\n      error = e;\n    }\n\n    expect(error).to.not.be.null;\n  });\n\n  it('should validate a fully configured options object', () => {\n    const validator = new PerformanceArray.PerformanceArrayOptionsValidator({\n      indices: [\n        {\n          propertyNames: ['id']\n        }\n      ]\n    });\n    validator.validate();\n  });\n});"]}